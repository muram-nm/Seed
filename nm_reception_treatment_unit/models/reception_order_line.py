# -*- coding:utf-8 -*-
from odoo import api, fields, models, _

from odoo.tools.safe_eval import safe_eval
from odoo.tools.sql import column_exists, create_column



class SalesOrderLine(models.Model):

    _inherit = 'sale.order.line'
   

    unit_id = fields.Many2one(
        'unit.unit', 'Generated Unit',
        index=True, copy=False, help="Unit generated by the sales order item")
    guest_id = fields.Many2one(
        'unit.guest', 'Generated Guest',
        index=True, copy=False, help="Guest generated by the sales order item")
    is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True, help="Sales Order item should generate a task and/or a Unit, depending on the product settings.")

    @api.depends('product_id.type')
    def _compute_is_service(self):
        for so_line in self:
            so_line.is_service = so_line.product_id.type == 'service'



    @api.model_create_multi
    def create(self, vals_list):
        lines = super().create(vals_list)
        # Do not generate task/unit when expense SO line, but allow
        # generate task with hours=0.
        for line in lines:
            if line.state == 'sale' and not line.is_expense:
                line.sudo()._timesheet_service_generation()
                # if the SO line created a task, post a message on the order
                if line.guest_id:
                    msg_body = _("Task Created (%s): <a href=# data-oe-model=unit.task data-oe-id=%d>%s</a>") % (line.product_id.name, line.guest_id.id, line.guest_id.name)
                    line.order_id.message_post(body=msg_body)
        return lines

    def write(self, values):
        result = super().write(values)
        # changing the ordered quantity should change the planned hours on the
        # task, whatever the SO state. It will be blocked by the super in case
        # of a locked sale order.
        if 'product_uom_qty' in values and not self.env.context.get('no_update_planned_hours', False):
            for line in self:
                if line.guest_id and line.product_id.type == 'service':
                    planned_hours = line._convert_qty_company_hours(line.guest_id.company_id)
                    line.guest_id.write({'planned_hours': planned_hours})
        return result


    ###########################################
    # Service : Unit and guest generation
    ###########################################

    def _convert_qty_company_hours(self, dest_company):
        return self.product_uom_qty


class ReceptionOrderLine(models.Model):

    _inherit= 'reception.order.line'
    

    unit_id = fields.Many2one(
        'unit.unit', 'Generated Unit',
        index=True, copy=False, help="Unit generated by the sales order item",
        related='product_id.unit_id',
        readonly=True,
        store=True
        )
    guest_id = fields.Many2one(
        'unit.guest', 'Generated Guest',
        index=True, copy=False, help="Guest generated by the sales order item")
    is_service = fields.Boolean("Is a Service", compute='_compute_is_service', store=True, compute_sudo=True, help="Sales Order item should generate a task and/or a Unit, depending on the product settings.")


    @api.depends('product_id.type')
    def _compute_is_service(self):
        for ro_line in self:
            ro_line.is_service = ro_line.product_id.type == 'service'



    def _create_unit_guest(self):
        guest = self.env['unit.guest'].sudo().create({
            'name':self.reception_order_id.name,
            'partner_id':self.reception_order_id.customer_id.partner_id.id,
            'reception_line_id':self.id,
            'reception_order_id':self.reception_order_id.id,    
            # 'description':
            'unit_id':self.unit_id.id,
            'customer_id':self.reception_order_id.customer_id.id
        })
        guest.sudo().write({
            
        })